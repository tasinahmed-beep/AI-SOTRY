import { useEffect, useRef, useState } from "react";
import { Link } from "react-router-dom";

export interface ImageData {
  id: string;
  src: string;
  // Optional responsive/metadata fields (generated by scripts)
  srcSet?: string;
  width?: number;
  height?: number;
  placeholder?: string;
  title: string;
  prompt: string;
  negativePrompt: string;
  style: string;
  aspectRatio: string;
  size: string;
  orientation: "portrait" | "landscape";
  tags?: string[];
}

interface ImageGridProps {
  images: ImageData[];
  searchQuery: string;
  onSelect: (image: ImageData) => void;
}

const ImageGrid = ({ images, searchQuery, onSelect }: ImageGridProps) => {
  const [displayedImages, setDisplayedImages] = useState<ImageData[]>([]);
  const [page, setPage] = useState(1);
  const loaderRef = useRef<HTMLDivElement>(null);
  const imagesPerPage = 12;

  useEffect(() => {
    setDisplayedImages(images.slice(0, imagesPerPage));
    setPage(1);
  }, [images]);

  useEffect(() => {
    const observer = new IntersectionObserver(
      (entries) => {
        if (entries[0].isIntersecting && displayedImages.length < images.length) {
          const nextPage = page + 1;
          const newImages = images.slice(0, nextPage * imagesPerPage);
          setDisplayedImages(newImages);
          setPage(nextPage);
        }
      },
      { threshold: 0.1 }
    );

    if (loaderRef.current) {
      observer.observe(loaderRef.current);
    }

    return () => observer.disconnect();
  }, [displayedImages, page, images]);

  return (
    <section className="py-8 px-4">
      <div className="container mx-auto">
        <div className="flex items-center justify-between mb-6 animate-fade-in">
          <h2 className="text-3xl font-bold capitalize">
            {searchQuery} Prompts
            <span className="text-muted-foreground text-lg ml-3 font-normal">
              ({displayedImages.length} {displayedImages.length === 1 ? 'result' : 'results'})
            </span>
          </h2>
        </div>

        {displayedImages.length === 0 ? (
          <div className="text-center py-16 animate-fade-in">
            <p className="text-xl text-muted-foreground mb-4">
              No prompts found for "{searchQuery}"
            </p>
            <p className="text-muted-foreground">
              Try keywords like: ice, fire, sword, warrior, landscape, dragon, magic
            </p>
          </div>
        ) : (
          <>
            <div className="columns-1 sm:columns-2 md:columns-3 lg:columns-4 xl:columns-6 gap-2 md:gap-3 lg:gap-4">
              {displayedImages.map((image, index) => (
                <ImageTile key={image.id} image={image} index={index} onSelect={onSelect} />
              ))}
            </div>

            {displayedImages.length < images.length && (
              <div ref={loaderRef} className="flex justify-center py-8">
                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
              </div>
            )}
          </>
        )}
      </div>

      {/* Modal is managed at the page level via deep link */}

      <ScrollTopButton />
    </section>
  );
};

export default ImageGrid;

function ImageTile({ image, index, onSelect }: { image: ImageData; index: number; onSelect: (img: ImageData) => void }) {
  const [loaded, setLoaded] = useState(false);
  return (
    <Link
      to={`/p/${image.id}`}
      onClick={() => onSelect(image)}
      style={{ animationDelay: `${index * 0.05}s` }}
      className={"glass-panel group relative inline-block w-full break-inside-avoid rounded-xl overflow-hidden cursor-pointer bg-background/40 backdrop-blur-sm border border-white/10 shadow-sm hover:shadow-2xl hover:shadow-primary/20 hover:border-primary/40 hover:ring-1 hover:ring-primary/30 transition-all duration-500 hover:scale-[1.03] animate-scale-in mb-2 md:mb-3 lg:mb-4"}
      aria-label={`Open ${image.title}`}
    >
      <div className="pointer-events-none absolute inset-0 opacity-0 group-hover:opacity-100 transition-opacity bg-gradient-to-br from-white/10 to-transparent" />
      <img
        src={image.src}
        srcSet={image.srcSet}
        alt={image.title}
        width={image.width}
        height={image.height}
        loading="lazy"
        decoding="async"
        fetchPriority="low"
        sizes="(min-width:1280px) 16vw, (min-width:1024px) 25vw, (min-width:768px) 33vw, (min-width:640px) 50vw, 100vw"
        onLoad={() => setLoaded(true)}
        className={`block w-full h-full object-cover transition-transform duration-700 group-hover:scale-[1.03] ${loaded ? 'opacity-100 animate-fade-in' : 'opacity-0'}`}
      />
      <div className="absolute inset-0 bg-gradient-to-t from-black/80 via-black/40 to-transparent 
        opacity-0 group-hover:opacity-100 transition-all duration-500">
        <div className="absolute bottom-0 left-0 right-0 p-4 transform translate-y-2 
          group-hover:translate-y-0 transition-transform duration-500">
          <p className="text-white text-sm font-medium mb-2 line-clamp-2">
            {image.title}
          </p>
          {image.tags && (
            <div className="flex flex-wrap gap-1">
              {image.tags.slice(0, 3).map((tag) => (
                <span
                  key={tag}
                  className="text-xs px-2 py-0.5 rounded-full bg-primary/80 text-white"
                >
                  {tag}
                </span>
              ))}
            </div>
          )}
        </div>
      </div>
    </Link>
  );
}

function ScrollTopButton() {
  const [visible, setVisible] = useState(false);
  useEffect(() => {
    const onScroll = () => setVisible(window.scrollY > 400);
    window.addEventListener('scroll', onScroll, { passive: true });
    onScroll();
    return () => window.removeEventListener('scroll', onScroll);
  }, []);
  if (!visible) return null;
  return (
    <button
      onClick={() => window.scrollTo({ top: 0, behavior: 'smooth' })}
      aria-label="Scroll to top"
      className="fixed z-40 glass-panel bg-background/60 backdrop-blur-xl border border-white/10 shadow-lg rounded-full p-3 hover:shadow-2xl hover:scale-105 transition-all"
      style={{ bottom: 'calc(1.5rem + env(safe-area-inset-bottom))', right: 'calc(1.5rem + env(safe-area-inset-right))' }}
    >
      â†‘
    </button>
  );
}
